" # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
" # #  Managed by Ansible                                                     # #
" # #  DO NOT EDIT THIS FILE MANUALLY                                         # #
" # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

" Клавиши <Leader> {{{
" ==============================================================================
" Должны определяться до загрузки плагинов

let mapleader = ','
let maplocalleader = ' '
" }}}

" Автоматическая установка менеджера плагинов vim-plug {{{
" ==============================================================================

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" }}}

" Плагины: {{{
" ==============================================================================
" Для установки/обновления плагинов команда :PlugInstall

call plug#begin(expand('~/.vim/plugged'))

" --- Общие {{{

" Разумные настройки от авторитета
Plug 'tpope/vim-sensible' " {{{
" }}}

" Поддержка команды повтора '.' для сложных команд, в том числе от плагинов
Plug 'tpope/vim-repeat' " {{{
" }}}

" Управление окружением (например, скобками или тэгами)
Plug 'tpope/vim-surround' " {{{
" }}}

" Поддержка файлов .editorconfig
Plug 'editorconfig/editorconfig-vim' " {{{
" }}}

" Современная версия Powerline (строка состояния)
Plug 'vim-airline/vim-airline' " {{{
Plug 'vim-airline/vim-airline-themes'
    let g:airline_powerline_fonts = 1
    let g:airline_theme = 'simple'
    let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#fnamemod = ':t'
    let g:airline#extensions#tabline#show_tab_nr = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1

    nmap <leader>1 <Plug>AirlineSelectTab1
    nmap <leader>2 <Plug>AirlineSelectTab2
    nmap <leader>3 <Plug>AirlineSelectTab3
    nmap <leader>4 <Plug>AirlineSelectTab4
    nmap <leader>5 <Plug>AirlineSelectTab5
    nmap <leader>6 <Plug>AirlineSelectTab6
    nmap <leader>7 <Plug>AirlineSelectTab7
    nmap <leader>8 <Plug>AirlineSelectTab8
    nmap <leader>9 <Plug>AirlineSelectTab9
" }}}

" Визуальная тема
Plug 'lifepillar/vim-solarized8' " {{{
" }}}

" Подсветка (раскраска) текста только вокруг текущего параграфа
Plug 'junegunn/limelight.vim' " {{{
    let g:limelight_conceal_ctermfg = 238
    let g:limelight_paragraph_span = 1  " Количество подсвечеваемых параграфов вокруг текущего параграфа
    let g:limelight_priority = -1  " Подсвечивать результаты поиска за пределами

    nmap <silent> <Leader><F12> :Limelight!!<CR>
    nmap <silent> <C-W><Enter> :Limelight!!<CR>
" }}}

" Режим 'ничего лишнего' (только текст)
Plug 'junegunn/goyo.vim' " {{{
    nmap <silent> <F12> :Goyo<CR>
    nmap <silent> <C-W><Space> :Goyo<CR>

    " Автоматически включить/выключить Limelight
    autocmd! User GoyoEnter Limelight
    autocmd! User GoyoLeave Limelight!
" }}}

" Комментировать/раскомментировать блоки текста
Plug 'scrooloose/nerdcommenter' " {{{
    let g:NERDSpaceDelims = 1
    let g:NERDCommentEmptyLines = 1
" }}}

" }}} ---

call plug#end()
" }}}

" Цветовая схема {{{
" ==============================================================================

set termguicolors
set background=dark
colorscheme solarized8_low
" }}}

" Основные настройки редактора {{{
" ==============================================================================

filetype on
filetype plugin on
filetype plugin indent on

set hidden

set ignorecase
set smartcase

set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

"set splitbelow
"set splitright

set foldmethod=marker
set foldlevelstart=0

if has('mouse')
	set mouse= " a
endif

set confirm
set fencs=utf-8,cp1251,latin1

set spelllang=ru,en
set spell

" Сохранять swapfile каждые 2 секунды бездействия
set updatetime=2000
" }}}

" Визуальные настройки редактора {{{
" ==============================================================================

set colorcolumn=100
set number
set showmatch
set showtabline=2
set scrolloff=5
set synmaxcol=200
set visualbell
" }}}

" Дополнительные команды {{{
" ==============================================================================

" Позволяет записать файл под правами sudo
cnoremap w!! w !sudo tee > /dev/null %
" }}}

" Определения комбинаций клавиш {{{
" ==============================================================================

" <Enter> в нормальном режиме - вставить пустую строку и остаться в нормальном режиме
nnoremap <silent> <CR> i<CR><Esc>

" Перемещаться по длиной строке как по нескольким строкам
nnoremap j gj
nnoremap k gk

" В начало и в конец строки
nnoremap H ^
nnoremap L $

" Y - скопировать до конца строки (аналогично командам C и D)
noremap Y y$

" Оставлять выделение после сдвига (indent)
vnoremap < <gv
vnoremap > >gv

" Выделить только что вставленный текст (например, для последующего сдвига)
" Стандартная команда gv - выделить ранее выделенный текст
noremap gV `[v`]

" Убрать подсветку найденной подстроки
nmap <silent> // :nohlsearch<CR>

" Показывать результат поиска в центре окна
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

" Раскрывать/закрывать вложение (fold)
nnoremap <Space> za
vnoremap <Space> za

" Перефокусировать текущее вложение (закрыть все вложения, переоткрыть текущее
" и расположиться в центре экрана)
nnoremap <Leader>z zMzvzz

" Переключение между буферами
nmap <leader>. :bnext<CR>
nmap <leader>, :bprevious<CR>

" Переключение между окнами: <Tab>+hjkl
nnoremap <Tab> <C-W>

" Следующее окно: Tab-Tab
nnoremap <Tab><Tab> <C-W>w

" Предыдущее окно: Shift-Tab
nnoremap <S-Tab> <C-W>W

" Следующая вкладка (Tab): Ctrl-Tab
nnoremap <C-Tab> :tabnext<CR>

" Предыдущая вкладка (Tab): Ctrl-Shift-Tab
nnoremap <C-S-Tab> :tabprevious<CR>

" }}}

" Autocommands {{{
" ==============================================================================

if has("autocmd")

  " Форма курсора в зависимости от режима редактирования.
  " Источник: https://vim.fandom.com/wiki/Change_cursor_shape_in_different_modes
  au VimEnter,InsertLeave * silent execute '!echo -ne "\e[1 q"' | redraw!
  au InsertEnter,InsertChange *
    \ if v:insertmode == 'i' |
    \   silent execute '!echo -ne "\e[5 q"' | redraw! |
    \ elseif v:insertmode == 'r' |
    \   silent execute '!echo -ne "\e[3 q"' | redraw! |
    \ endif
  au VimLeave * silent execute '!echo -ne "\e[ q"' | redraw!

  " В первый обычный запуск Vim принудительно выполнить команду set spell, чтобы
  " Vim закачал словарь для ru. Автоматически это делается только для en.
  " Интерактивно будет задано несколько вопросов.
  if !v:vim_did_enter
      autocmd VimEnter * ++once ++nested set spell spelllang=ru,en
  endif

endif

" }}}
